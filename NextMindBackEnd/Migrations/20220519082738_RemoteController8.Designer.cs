// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextMindBackEnd.Data;

#nullable disable

namespace NextMindBackEnd.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220519082738_RemoteController8")]
    partial class RemoteController8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NextMindBackEnd.Data.Models.Control", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IftttKeyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IftttKeyId");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.IftttKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IftttKeys");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("RemoteControllerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RemoteControllerId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.PageControl", b =>
                {
                    b.Property<int>("ControlID")
                        .HasColumnType("int");

                    b.Property<int>("PageID")
                        .HasColumnType("int");

                    b.HasKey("ControlID", "PageID");

                    b.HasIndex("PageID");

                    b.ToTable("PageControls");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.RemoteController", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RemoteControllers");
                });

            modelBuilder.Entity("NextMindBackEnd.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.Control", b =>
                {
                    b.HasOne("NextMindBackEnd.Data.Models.IftttKey", "IftttKey")
                        .WithMany("Controls")
                        .HasForeignKey("IftttKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IftttKey");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.Page", b =>
                {
                    b.HasOne("NextMindBackEnd.Data.Models.RemoteController", "RemoteController")
                        .WithMany("Pages")
                        .HasForeignKey("RemoteControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RemoteController");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.PageControl", b =>
                {
                    b.HasOne("NextMindBackEnd.Data.Models.Control", "Control")
                        .WithMany("PageControls")
                        .HasForeignKey("ControlID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextMindBackEnd.Data.Models.Page", "Page")
                        .WithMany("PageControls")
                        .HasForeignKey("PageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Control");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.RemoteController", b =>
                {
                    b.HasOne("NextMindBackEnd.Models.User", "User")
                        .WithMany("Controllers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.Control", b =>
                {
                    b.Navigation("PageControls");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.IftttKey", b =>
                {
                    b.Navigation("Controls");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.Page", b =>
                {
                    b.Navigation("PageControls");
                });

            modelBuilder.Entity("NextMindBackEnd.Data.Models.RemoteController", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("NextMindBackEnd.Models.User", b =>
                {
                    b.Navigation("Controllers");
                });
#pragma warning restore 612, 618
        }
    }
}
